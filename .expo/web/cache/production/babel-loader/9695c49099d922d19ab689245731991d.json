{"ast":null,"code":"'use strict';var invariant=require('invariant');var TRACE_TAG_REACT_APPS=1<<17;var TRACE_TAG_JS_VM_CALLS=1<<27;var _enabled=false;var _asyncCookie=0;var _markStack=[];var _markStackIndex=-1;var _canInstallReactHook=false;var REACT_MARKER=\"\\u269B\";var userTimingPolyfill=__DEV__?{mark:function mark(markName){if(_enabled){_markStackIndex++;_markStack[_markStackIndex]=markName;var systraceLabel=markName;if(markName[0]===REACT_MARKER){var indexOfId=markName.lastIndexOf(' (#');var cutoffIndex=indexOfId!==-1?indexOfId:markName.length;systraceLabel=markName.slice(2,cutoffIndex);}Systrace.beginEvent(systraceLabel);}},measure:function measure(measureName,startMark,endMark){if(_enabled){invariant(typeof measureName==='string'&&typeof startMark==='string'&&typeof endMark==='undefined','Only performance.measure(string, string) overload is supported.');var topMark=_markStack[_markStackIndex];invariant(startMark===topMark,'There was a mismatching performance.measure() call. '+'Expected \"%s\" but got \"%s.\"',topMark,startMark);_markStackIndex--;Systrace.endEvent();}},clearMarks:function clearMarks(markName){if(_enabled){if(_markStackIndex===-1){return;}if(markName===_markStack[_markStackIndex]){if(userTimingPolyfill!=null){userTimingPolyfill.measure(markName,markName);}}}},clearMeasures:function clearMeasures(){}}:null;var Systrace={installReactHook:function installReactHook(){if(_enabled){if(__DEV__){global.performance=userTimingPolyfill;}}_canInstallReactHook=true;},setEnabled:function setEnabled(enabled){if(_enabled!==enabled){if(__DEV__){if(enabled){global.nativeTraceBeginLegacy&&global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);}else{global.nativeTraceEndLegacy&&global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);}if(_canInstallReactHook){if(enabled&&global.performance===undefined){global.performance=userTimingPolyfill;}}}_enabled=enabled;}},isEnabled:function isEnabled(){return _enabled;},beginEvent:function beginEvent(profileName,args){if(_enabled){profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS,profileName,args);}},endEvent:function endEvent(){if(_enabled){global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);}},beginAsyncEvent:function beginAsyncEvent(profileName){var cookie=_asyncCookie;if(_enabled){_asyncCookie++;profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS,profileName,cookie);}return cookie;},endAsyncEvent:function endAsyncEvent(profileName,cookie){if(_enabled){profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS,profileName,cookie);}},counterEvent:function counterEvent(profileName,value){if(_enabled){profileName=typeof profileName==='function'?profileName():profileName;global.nativeTraceCounter&&global.nativeTraceCounter(TRACE_TAG_REACT_APPS,profileName,value);}}};if(__DEV__){require.Systrace=Systrace;}module.exports=Systrace;","map":{"version":3,"sources":["C:/Users/mmeader/Documents/Development/MastermindReactNative/node_modules/react-native/Libraries/Performance/Systrace.js"],"names":["invariant","require","TRACE_TAG_REACT_APPS","TRACE_TAG_JS_VM_CALLS","_enabled","_asyncCookie","_markStack","_markStackIndex","_canInstallReactHook","REACT_MARKER","userTimingPolyfill","__DEV__","mark","markName","systraceLabel","indexOfId","lastIndexOf","cutoffIndex","length","slice","Systrace","beginEvent","measure","measureName","startMark","endMark","topMark","endEvent","clearMarks","clearMeasures","installReactHook","global","performance","setEnabled","enabled","nativeTraceBeginLegacy","nativeTraceEndLegacy","undefined","isEnabled","profileName","args","nativeTraceBeginSection","nativeTraceEndSection","beginAsyncEvent","cookie","nativeTraceBeginAsyncSection","endAsyncEvent","nativeTraceEndAsyncSection","counterEvent","value","nativeTraceCounter","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nconst TRACE_TAG_REACT_APPS = 1 << 17; // eslint-disable-line no-bitwise\nconst TRACE_TAG_JS_VM_CALLS = 1 << 27; // eslint-disable-line no-bitwise\n\nlet _enabled = false;\nlet _asyncCookie = 0;\nconst _markStack = [];\nlet _markStackIndex = -1;\nlet _canInstallReactHook = false;\n\n// Implements a subset of User Timing API necessary for React measurements.\n// https://developer.mozilla.org/en-US/docs/Web/API/User_Timing_API\nconst REACT_MARKER = '\\u269B';\nconst userTimingPolyfill = __DEV__\n  ? {\n      mark(markName: string) {\n        if (_enabled) {\n          _markStackIndex++;\n          _markStack[_markStackIndex] = markName;\n          let systraceLabel = markName;\n          // Since perf measurements are a shared namespace in User Timing API,\n          // we prefix all React results with a React emoji.\n          if (markName[0] === REACT_MARKER) {\n            // This is coming from React.\n            // Removing component IDs keeps trace colors stable.\n            const indexOfId = markName.lastIndexOf(' (#');\n            const cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;\n            // Also cut off the emoji because it breaks Systrace\n            systraceLabel = markName.slice(2, cutoffIndex);\n          }\n          Systrace.beginEvent(systraceLabel);\n        }\n      },\n      measure(measureName: string, startMark: ?string, endMark: ?string) {\n        if (_enabled) {\n          invariant(\n            typeof measureName === 'string' &&\n              typeof startMark === 'string' &&\n              typeof endMark === 'undefined',\n            'Only performance.measure(string, string) overload is supported.',\n          );\n          const topMark = _markStack[_markStackIndex];\n          invariant(\n            startMark === topMark,\n            'There was a mismatching performance.measure() call. ' +\n              'Expected \"%s\" but got \"%s.\"',\n            topMark,\n            startMark,\n          );\n          _markStackIndex--;\n          // We can't use more descriptive measureName because Systrace doesn't\n          // let us edit labels post factum.\n          Systrace.endEvent();\n        }\n      },\n      clearMarks(markName: string) {\n        if (_enabled) {\n          if (_markStackIndex === -1) {\n            return;\n          }\n          if (markName === _markStack[_markStackIndex]) {\n            // React uses this for \"cancelling\" started measurements.\n            // Systrace doesn't support deleting measurements, so we just stop them.\n            if (userTimingPolyfill != null) {\n              userTimingPolyfill.measure(markName, markName);\n            }\n          }\n        }\n      },\n      clearMeasures() {\n        // React calls this to avoid memory leaks in browsers, but we don't keep\n        // measurements anyway.\n      },\n    }\n  : null;\n\nconst Systrace = {\n  installReactHook() {\n    if (_enabled) {\n      if (__DEV__) {\n        global.performance = userTimingPolyfill;\n      }\n    }\n    _canInstallReactHook = true;\n  },\n\n  setEnabled(enabled: boolean) {\n    if (_enabled !== enabled) {\n      if (__DEV__) {\n        if (enabled) {\n          global.nativeTraceBeginLegacy &&\n            global.nativeTraceBeginLegacy(TRACE_TAG_JS_VM_CALLS);\n        } else {\n          global.nativeTraceEndLegacy &&\n            global.nativeTraceEndLegacy(TRACE_TAG_JS_VM_CALLS);\n        }\n        if (_canInstallReactHook) {\n          if (enabled && global.performance === undefined) {\n            global.performance = userTimingPolyfill;\n          }\n        }\n      }\n      _enabled = enabled;\n    }\n  },\n\n  isEnabled(): boolean {\n    return _enabled;\n  },\n\n  /**\n   * beginEvent/endEvent for starting and then ending a profile within the same call stack frame\n   **/\n  beginEvent(profileName?: any, args?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);\n    }\n  },\n\n  endEvent() {\n    if (_enabled) {\n      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);\n    }\n  },\n\n  /**\n   * beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either\n   * occur on another thread or out of the current stack frame, eg await\n   * the returned cookie variable should be used as input into the endAsyncEvent call to end the profile\n   **/\n  beginAsyncEvent(profileName?: any): any {\n    const cookie = _asyncCookie;\n    if (_enabled) {\n      _asyncCookie++;\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceBeginAsyncSection(\n        TRACE_TAG_REACT_APPS,\n        profileName,\n        cookie,\n      );\n    }\n    return cookie;\n  },\n\n  endAsyncEvent(profileName?: any, cookie?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceEndAsyncSection(\n        TRACE_TAG_REACT_APPS,\n        profileName,\n        cookie,\n      );\n    }\n  },\n\n  /**\n   * counterEvent registers the value to the profileName on the systrace timeline\n   **/\n  counterEvent(profileName?: any, value?: any) {\n    if (_enabled) {\n      profileName =\n        typeof profileName === 'function' ? profileName() : profileName;\n      global.nativeTraceCounter &&\n        global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);\n    }\n  },\n};\n\nif (__DEV__) {\n  // This is needed, because require callis in polyfills are not processed as\n  // other files. Therefore, calls to `require('moduleId')` are not replaced\n  // with numeric IDs\n  // TODO(davidaurelio) Scan polyfills for dependencies, too (t9759686)\n  (require: any).Systrace = Systrace;\n}\n\nmodule.exports = Systrace;\n"]},"metadata":{},"sourceType":"script"}